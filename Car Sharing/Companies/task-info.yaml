type: edu
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the COMPANY table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }

            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }


        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("COMPANY")) {
                return wrong("Can't find table named 'company'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] columns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("COMPANY", columns);
            db.checkCompanyColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testInsert() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return CheckResult.wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return CheckResult.wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return CheckResult.wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return CheckResult.wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return CheckResult.wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return CheckResult.wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            program.execute("0");
            program.execute("0");

            return CheckResult.correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  text: "2022-08-17 15:06:57 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID INT\
    \ NOT NULL, NAME VARCHAR); [42101-200]\n2022-08-17 13:09:28 database: flush\n\
    org.h2.message.DbException: General error: \"org.h2.mvstore.MVStoreException:\
    \ The write format 1 is smaller than the supported format 2 [2.1.210/5]\" [50000-210]\n\
    \tat org.h2.message.DbException.get(DbException.java:216)\n\tat org.h2.message.DbException.convert(DbException.java:414)\n\
    \tat org.h2.mvstore.db.Store.lambda$new$0(Store.java:120)\n\tat org.h2.mvstore.MVStore.handleException(MVStore.java:3296)\n\
    \tat org.h2.mvstore.MVStore.panic(MVStore.java:585)\n\tat org.h2.mvstore.MVStore.<init>(MVStore.java:461)\n\
    \tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:4056)\n\tat org.h2.mvstore.db.Store.<init>(Store.java:129)\n\
    \tat org.h2.engine.Database.<init>(Database.java:324)\n\tat org.h2.engine.Engine.openSession(Engine.java:92)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:222)\n\tat org.h2.engine.Engine.createSession(Engine.java:201)\n\
    \tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.intellij.database.remote.jdbc.helpers.JdbcHelperImpl.connect(JdbcHelperImpl.java:642)\n\
    \tat com.intellij.database.remote.jdbc.impl.RemoteDriverImpl.connect(RemoteDriverImpl.java:56)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\n\
    \tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)\n\tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\n\
    \tat java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\n\t\
    at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:399)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"org.h2.mvstore.MVStoreException: The write format 1 is smaller\
    \ than the supported format 2 [2.1.210/5]\" [50000-210]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:573)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:496)\n\t\
    ... 34 more\nCaused by: org.h2.mvstore.MVStoreException: The write format 1 is\
    \ smaller than the supported format 2 [2.1.210/5]\n\tat org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)\n\
    \tat org.h2.mvstore.MVStore.getUnsupportedWriteFormatException(MVStore.java:1059)\n\
    \tat org.h2.mvstore.MVStore.readStoreHeader(MVStore.java:878)\n\tat org.h2.mvstore.MVStore.<init>(MVStore.java:455)\n\
    \t... 28 more\n2022-08-17 13:09:28 database: opening C:/Users/Stefan Koelewijn/IdeaProjects/Car\
    \ Sharing/Car Sharing/task/src/carsharing/db/carsharing\norg.h2.message.DbException:\
    \ General error: \"The write format 1 is smaller than the supported format 2 [2.1.210/5]\"\
    \ [50000-210]\n\tat org.h2.message.DbException.get(DbException.java:216)\n\tat\
    \ org.h2.mvstore.db.Store.convertMVStoreException(Store.java:166)\n\tat org.h2.mvstore.db.Store.<init>(Store.java:140)\n\
    \tat org.h2.engine.Database.<init>(Database.java:324)\n\tat org.h2.engine.Engine.openSession(Engine.java:92)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:222)\n\tat org.h2.engine.Engine.createSession(Engine.java:201)\n\
    \tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.intellij.database.remote.jdbc.helpers.JdbcHelperImpl.connect(JdbcHelperImpl.java:642)\n\
    \tat com.intellij.database.remote.jdbc.impl.RemoteDriverImpl.connect(RemoteDriverImpl.java:56)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\n\
    \tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)\n\tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\n\
    \tat java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\n\t\
    at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:399)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"The write format 1 is smaller than the supported format 2 [2.1.210/5]\"\
    \ [50000-210]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:573)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:496)\n\t\
    ... 29 more\nCaused by: org.h2.mvstore.MVStoreException: The write format 1 is\
    \ smaller than the supported format 2 [2.1.210/5]\n\tat org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)\n\
    \tat org.h2.mvstore.MVStore.getUnsupportedWriteFormatException(MVStore.java:1059)\n\
    \tat org.h2.mvstore.MVStore.readStoreHeader(MVStore.java:878)\n\tat org.h2.mvstore.MVStore.<init>(MVStore.java:455)\n\
    \tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:4056)\n\tat org.h2.mvstore.db.Store.<init>(Store.java:129)\n\
    \t... 26 more\n2022-08-17 13:09:36 database: flush\norg.h2.message.DbException:\
    \ General error: \"org.h2.mvstore.MVStoreException: The write format 1 is smaller\
    \ than the supported format 2 [2.1.210/5]\" [50000-210]\n\tat org.h2.message.DbException.get(DbException.java:216)\n\
    \tat org.h2.message.DbException.convert(DbException.java:414)\n\tat org.h2.mvstore.db.Store.lambda$new$0(Store.java:120)\n\
    \tat org.h2.mvstore.MVStore.handleException(MVStore.java:3296)\n\tat org.h2.mvstore.MVStore.panic(MVStore.java:585)\n\
    \tat org.h2.mvstore.MVStore.<init>(MVStore.java:461)\n\tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:4056)\n\
    \tat org.h2.mvstore.db.Store.<init>(Store.java:129)\n\tat org.h2.engine.Database.<init>(Database.java:324)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:92)\n\tat org.h2.engine.Engine.openSession(Engine.java:222)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:201)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.intellij.database.remote.jdbc.helpers.JdbcHelperImpl.connect(JdbcHelperImpl.java:642)\n\
    \tat com.intellij.database.remote.jdbc.impl.RemoteDriverImpl.connect(RemoteDriverImpl.java:56)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\n\
    \tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)\n\tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\n\
    \tat java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\n\t\
    at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:399)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"org.h2.mvstore.MVStoreException: The write format 1 is smaller\
    \ than the supported format 2 [2.1.210/5]\" [50000-210]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:573)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:496)\n\t\
    ... 34 more\nCaused by: org.h2.mvstore.MVStoreException: The write format 1 is\
    \ smaller than the supported format 2 [2.1.210/5]\n\tat org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)\n\
    \tat org.h2.mvstore.MVStore.getUnsupportedWriteFormatException(MVStore.java:1059)\n\
    \tat org.h2.mvstore.MVStore.readStoreHeader(MVStore.java:878)\n\tat org.h2.mvstore.MVStore.<init>(MVStore.java:455)\n\
    \t... 28 more\n2022-08-17 13:09:36 database: opening C:/Users/Stefan Koelewijn/IdeaProjects/Car\
    \ Sharing/Car Sharing/task/src/carsharing/db/carsharing\norg.h2.message.DbException:\
    \ General error: \"The write format 1 is smaller than the supported format 2 [2.1.210/5]\"\
    \ [50000-210]\n\tat org.h2.message.DbException.get(DbException.java:216)\n\tat\
    \ org.h2.mvstore.db.Store.convertMVStoreException(Store.java:166)\n\tat org.h2.mvstore.db.Store.<init>(Store.java:140)\n\
    \tat org.h2.engine.Database.<init>(Database.java:324)\n\tat org.h2.engine.Engine.openSession(Engine.java:92)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:222)\n\tat org.h2.engine.Engine.createSession(Engine.java:201)\n\
    \tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.intellij.database.remote.jdbc.helpers.JdbcHelperImpl.connect(JdbcHelperImpl.java:642)\n\
    \tat com.intellij.database.remote.jdbc.impl.RemoteDriverImpl.connect(RemoteDriverImpl.java:56)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)\n\
    \tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)\n\tat java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:712)\n\
    \tat java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)\n\t\
    at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)\n\
    \tat java.base/java.security.AccessController.doPrivileged(AccessController.java:399)\n\
    \tat java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"The write format 1 is smaller than the supported format 2 [2.1.210/5]\"\
    \ [50000-210]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:573)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:496)\n\t\
    ... 29 more\nCaused by: org.h2.mvstore.MVStoreException: The write format 1 is\
    \ smaller than the supported format 2 [2.1.210/5]\n\tat org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)\n\
    \tat org.h2.mvstore.MVStore.getUnsupportedWriteFormatException(MVStore.java:1059)\n\
    \tat org.h2.mvstore.MVStore.readStoreHeader(MVStore.java:878)\n\tat org.h2.mvstore.MVStore.<init>(MVStore.java:455)\n\
    \tat org.h2.mvstore.MVStore$Builder.open(MVStore.java:4056)\n\tat org.h2.mvstore.db.Store.<init>(Store.java:129)\n\
    \t... 26 more\n"
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/Company.java
  visible: true
  learner_created: true
- name: src/carsharing/CompanyDao.java
  visible: true
  learner_created: true
- name: src/carsharing/CompanyDaoImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11502#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Aug 2022 10:18:15 UTC
record: 2
